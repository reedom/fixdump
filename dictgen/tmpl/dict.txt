package dict

type FixDict interface {
	Version() string
	TagName(tag int) (string, bool)
	ValueName(tag int, value string) (string, bool)
}

type emptyDict struct {
	fixver string
}

func (d *emptyDict) Version() string {
	return d.fixver
}

func (d *emptyDict) TagName(tag int) (string, bool) {
	return "", false
}

func (d *emptyDict) ValueName(tag int, value string) (string, bool) {
	return "", false
}

var dicts map[string]FixDict

func init() {
	dicts = make(map[string]FixDict)
}

func Get(fixver string) FixDict {
	dict, ok := dicts[fixver]
	if ok {
		return dict
	}

	switch fixver {
{{- range .}}
	case "{{.Ver}}":
		dict = &{{.Name}}{}
		dicts[fixver] = dict
		return dict
{{- end}}
	}

	dict = &emptyDict{fixver}
	dicts[fixver] = dict
	return dict
}
